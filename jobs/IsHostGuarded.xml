<?xml version="1.1" encoding="UTF-8"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>ghost</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <org.jvnet.hudson.plugins.triggers.startup.HudsonStartupTrigger plugin="startup-trigger-plugin@2.9.3">
      <spec></spec>
      <label>ghost</label>
      <quietPeriod>0</quietPeriod>
      <runOnChoice>ON_CONNECT</runOnChoice>
    </org.jvnet.hudson.plugins.triggers.startup.HudsonStartupTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.3">
      <command>

##DESIGN: If we are running 32 bit powershell, we need to respawn with the 64 bit version.
##       Alternatively, I could have used a 64 bit Java installer but realize ... this snippet
##       from the internets allows for both options which is nice.

if ($env:PROCESSOR_ARCHITEW6432 -eq "AMD64") {
    write-warning "Relaunching as AMD"
    if ($myInvocation.Line) {
        &amp;"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile $myInvocation.Line
    }else{
        &amp;"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile -file "$($myInvocation.InvocationName)" $args
    }
exit $lastexitcode
}

##DESIGN: The current approach uses powershell embedded in the jobs.
##       This can be easily changed to just include the Import-Module and a single cmdlet call.

$failed=$false
Import-Module C:\users\public\Microsoft.LSG.Utilities.psm1 -Force
$global:LSG_ReuseLog = $true
Start-LSGNotes -path results.log
if( -not $? )
{
    $issue = $Error[0].Exception.Message
    Write-LSGNote "ERROR::$issue"
    $failed=$true
}
$ClientConfiguration = Get-HgsClientConfiguration
if( -not $? )
{
    $issue = $Error[0].Exception.Message
    Write-LSGNote "ERROR::$issue"
    $failed=$true
}
else
{
  $ClientConfiguration
  $ClientConfiguration | ConvertTo-JSON -Depth 1 | Set-Content -path "ClientConfiguration.json"
  Write-LSGNote "ClientConfiguration stored as ClientConfiguration.json"
  if( $ClientConfiguration.IsHostGuarded)
  {
    Write-LSGNote "Host is guarded. PASS"
  }
  else
  {
    Write-LSGNote "Host is NOT guarded. FAIL."
    $failed=$true
  }
}
if( $failed )
{
  exit 1
}
</command>
    </hudson.plugins.powershell.PowerShell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
